{"version":3,"sources":["BoidsSimulation/Boid.ts","BoidsSimulation/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Boid2","boid","pos","velocity","acceleration","colour","size","perceptionRadius","boidsAwareness","this","r","g","b","randomVector","min","max","vector","Vector","x","Math","random","y","z","limits","flock","alignmentMultiplier","cohesionMultiplier","separationMultiplier","maxSpeed","maxAcceleration","maxForce","alignmentValue","alignment","cohesionValue","cohesion","separationValue","separation","mult","add","limit","edges","steering","total","dist","diff","sub","distance","div","normalize","p5","stroke","strokeWeight","point","BoidsSketch","props","useState","set","setLimits","boids","setBoids","setAlignmentMultiplier","setCohesionMultiplier","setSeparationMultiplier","setMaxForce","setMaxAcceleration","setMaxSpeed","setup","canvasParentRef","width","windowWidth","height","windowHeight","smallerSize","resizeCanvas","createCanvas","parent","draw","update","updateFlock","background","length","push","Boid","pop","windowResized","Typography","id","gutterBottom","Slider","value","step","onChange","event","valueLabelDisplay","App","className","BoidsSimulation","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2448b3e8.chunk.js","sourcesContent":["import p5Types, { Color, Vector } from 'p5';\n\ninterface Colour {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface IBoid {\n  pos: Vector;\n  velocity: Vector;\n  colour: Colour;\n  acceleration: Vector;\n  size: number;\n  perceptionRadius: number;\n  boidsAwareness: number;\n}\n\nclass Boid2 {\n  pos: Vector;\n  velocity: Vector;\n  acceleration: Vector;\n  colour: Colour;\n  size: number;\n  perceptionRadius: number;\n  boidsAwareness: number;\n\n  randomVector(min: number, max: number): Vector {\n    const vector: Vector = new Vector();\n    vector.x = Math.random() * (max - min) + min;\n    vector.y = Math.random() * (max - min) + min;\n    vector.z = Math.random() * (max - min) + min;\n    return vector;\n  }\n\n  constructor(boid?: IBoid) {\n    this.colour = (boid && boid.colour) || { r: 255, g: 255, b: 255 };\n    this.pos = (boid && boid.pos) || this.randomVector(0, 500);\n    this.velocity = (boid && boid.velocity) || this.randomVector(0, 1);\n    this.acceleration = (boid && boid.acceleration) || this.randomVector(0, 5);\n    this.perceptionRadius = (boid && boid.perceptionRadius) || 30;\n    this.size = (boid && boid.size) || 5;\n    this.boidsAwareness = (boid && boid.boidsAwareness) || 7;\n  }\n\n  update(\n    limits: Vector,\n    flock?: Boid2[],\n    alignmentMultiplier: number = 1,\n    cohesionMultiplier: number = 1,\n    separationMultiplier: number = 1,\n    maxSpeed: number = 2,\n    maxAcceleration: number = 0.5,\n    maxForce: number = 0.1\n  ) {\n    if (flock) {\n      let alignmentValue: Vector = this.alignment(flock, maxSpeed, maxAcceleration, maxForce);\n      let cohesionValue: Vector = this.cohesion(flock, maxSpeed, maxAcceleration, maxForce);\n      let separationValue: Vector = this.separation(flock, maxSpeed, maxAcceleration, maxForce);\n\n      alignmentValue = Vector.mult(alignmentValue, alignmentMultiplier);\n      cohesionValue = Vector.mult(cohesionValue, cohesionMultiplier);\n      separationValue = Vector.mult(separationValue, separationMultiplier);\n\n      this.acceleration = Vector.add(this.acceleration, alignmentValue);\n      this.acceleration = Vector.add(this.acceleration, cohesionValue);\n      this.acceleration = Vector.add(this.acceleration, separationValue);\n    }\n\n    this.pos = Vector.add(this.pos, this.velocity);\n    this.velocity = Vector.add(this.velocity, this.acceleration);\n    this.velocity = this.velocity.limit(maxSpeed);\n    this.acceleration = Vector.mult(this.acceleration, 0.5);\n    this.edges(limits);\n  }\n\n  separation(flock: Boid2[], maxSpeed: number, maxAcceleration: number, maxForce: number) {\n    let steering = new Vector();\n    let total = 0;\n\n    for (const boid of flock) {\n      if (this !== boid) {\n        const isInPerceptionRadius = Vector.dist(this.pos, boid.pos) <= this.perceptionRadius;\n        if (isInPerceptionRadius) {\n          let diff = Vector.sub(this.pos, boid.pos);\n          const distance = Vector.dist(this.pos, boid.pos);\n          diff = Vector.div(diff, distance ** 2);\n          steering = Vector.add(steering, diff);\n          total++;\n          if (total >= this.boidsAwareness) break;\n        }\n      }\n    }\n\n    if (total > 0) {\n      steering = Vector.div(steering, total);\n      steering = Vector.mult(steering.normalize(), maxSpeed);\n      steering = Vector.sub(steering, this.velocity);\n      steering = steering.limit(maxForce);\n    }\n    return steering;\n  }\n\n  alignment(flock: Boid2[], maxSpeed: number, maxAcceleration: number, maxForce: number) {\n    let steering = new Vector();\n    let total = 0;\n    for (const boid of flock) {\n      if (this !== boid) {\n        const isInPerceptionRadius = Vector.dist(this.pos, boid.pos) <= this.perceptionRadius;\n        if (isInPerceptionRadius) {\n          steering = Vector.add(steering, boid.velocity);\n          total++;\n          if (total >= this.boidsAwareness) break;\n        }\n      }\n    }\n    if (total > 0) {\n      steering = Vector.div(steering, total);\n      steering = Vector.mult(steering.normalize(), maxSpeed);\n      steering = Vector.sub(steering, this.velocity);\n      steering = steering.limit(maxForce);\n    }\n    return steering;\n  }\n\n  cohesion(flock: Boid2[], maxSpeed: number, maxAcceleration: number, maxForce: number) {\n    let steering = new Vector();\n    let total = 0;\n    for (const boid of flock) {\n      if (this !== boid) {\n        const isInPerceptionRadius = Vector.dist(this.pos, boid.pos) <= this.perceptionRadius;\n        if (isInPerceptionRadius) {\n          steering = Vector.add(steering, boid.pos);\n          total++;\n          if (total >= this.boidsAwareness) break;\n        }\n      }\n    }\n    if (total > 0) {\n      steering = Vector.div(steering, total);\n      steering = Vector.sub(steering, this.pos);\n      steering = Vector.mult(steering.normalize(), maxSpeed);\n      steering = Vector.sub(steering, this.velocity);\n      steering = steering.limit(maxForce);\n    }\n    return steering;\n  }\n\n  // randomColour(): Colour {\n  //   const colour: Colour = {\n  //     r: Math.floor(Math.random() * 255),\n  //     g: Math.floor(Math.random() * 255),\n  //     b: Math.floor(Math.random() * 255),\n  //   };\n\n  //   return colour;\n  // }\n\n  draw(p5: p5Types) {\n    // this.colour = this.randomColour();\n    p5.stroke(this.colour.r, this.colour.g, this.colour.b);\n    p5.strokeWeight(this.size);\n    p5.point(this.pos.x, this.pos.y, this.pos.z);\n  }\n\n  edges(limits: Vector) {\n    if (this.pos.x > limits.x) this.pos.x = 0;\n    else if (this.pos.x < 0) this.pos.x = limits.x;\n\n    if (this.pos.y > limits.y) this.pos.y = 0;\n    else if (this.pos.y < 0) this.pos.y = limits.y;\n\n    if (this.pos.z > limits.z) this.pos.z = 0;\n    else if (this.pos.z < 0) this.pos.z = limits.z;\n  }\n}\n\nexport default Boid2;\n","import React, { useState, useLayoutEffect } from 'react';\nimport Sketch from 'react-p5';\nimport p5Types, { Vector } from 'p5'; //Import this for typechecking and intellisense\nimport Boid from './Boid';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\ninterface ComponentProps {\n  //Your component props\n}\n\n// function useWindowSize() {\n//   const [size, setSize] = useState([0, 0]);\n//   useLayoutEffect(() => {\n//     function updateSize() {\n//       setSize([window.innerWidth, window.innerHeight]);\n//     }\n//     window.addEventListener('resize', updateSize);\n//     updateSize();\n//     return () => window.removeEventListener('resize', updateSize);\n//   }, []);\n//   return size;\n// }\n\nconst BoidsSketch: React.FC<ComponentProps> = (props: ComponentProps) => {\n  // const [width, height] = useWindowSize();\n  const [limits, setLimits] = useState<Vector>(new Vector().set(500, 500, 500));\n\n  const [boids, setBoids] = useState<number>(100);\n  const [alignmentMultiplier, setAlignmentMultiplier] = useState<number>(1);\n  const [cohesionMultiplier, setCohesionMultiplier] = useState<number>(1);\n  const [separationMultiplier, setSeparationMultiplier] = useState<number>(1);\n  const [maxForce, setMaxForce] = useState<number>(0.1);\n  const [maxAcceleration, setMaxAcceleration] = useState<number>(1);\n  const [maxSpeed, setMaxSpeed] = useState<number>(2);\n\n  const flock: Boid[] = [];\n\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    const width = p5.windowWidth;\n    const height = p5.windowHeight;\n    const smallerSize = width < height ? width : height;\n\n    if (p5.width !== smallerSize) {\n      const vector = new Vector();\n      vector.x = smallerSize;\n      vector.y = smallerSize;\n      vector.z = smallerSize;\n      setLimits(vector);\n      p5.resizeCanvas(smallerSize, smallerSize);\n    }\n    p5.createCanvas(width, height).parent(canvasParentRef);\n  };\n\n  function updateFlock(flock: Array<Boid>) {\n    for (let boid of flock) boid.update(limits, flock, alignmentMultiplier, cohesionMultiplier, separationMultiplier);\n  }\n\n  const draw = (p5: p5Types) => {\n    updateFlock(flock);\n    p5.background(0);\n    if (flock.length < boids) flock.push(new Boid());\n    else if (flock.length > boids) flock.pop();\n    for (const boid of flock) boid.draw(p5);\n  };\n\n  const handleAlignmentMultiplierChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    if (typeof value === 'number') setAlignmentMultiplier(value);\n  };\n\n  const handleCohesionMultiplierChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    if (typeof value === 'number') setCohesionMultiplier(value);\n  };\n\n  const handleSeparationMultiplierChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    if (typeof value === 'number') setSeparationMultiplier(value);\n  };\n\n  const handleMaxForceChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    if (typeof value === 'number') setMaxForce(value);\n  };\n\n  const handleMaxAccelerationChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    if (typeof value === 'number') setMaxAcceleration(value);\n  };\n\n  const handleMaxSpeedChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    if (typeof value === 'number') setMaxSpeed(value);\n  };\n\n  const handleResize = (p5: p5Types) => {\n    const width = p5.windowWidth;\n    const height = p5.windowHeight;\n    const smallerSize = width < height ? width : height;\n\n    if (p5.width !== smallerSize) {\n      const vector = new Vector();\n      vector.x = smallerSize;\n      vector.y = smallerSize;\n      vector.z = smallerSize;\n      setLimits(vector);\n      p5.resizeCanvas(smallerSize, smallerSize);\n    }\n  };\n\n  const handleBoidsChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n    if (typeof value === 'number') setBoids(value);\n  };\n\n  return (\n    <>\n      <Sketch setup={setup} draw={draw} windowResized={handleResize} />\n      <>\n        <Typography id=\"boids\" gutterBottom>\n          Ammount of Boids\n        </Typography>\n        <Slider value={boids} min={1} max={500} step={1} onChange={handleBoidsChange} valueLabelDisplay=\"auto\" />\n      </>\n      <>\n        <Typography id=\"alignmentMultiplier\" gutterBottom>\n          Alignment Multiplier\n        </Typography>\n        <Slider value={alignmentMultiplier} min={0.1} max={1} step={0.1} onChange={handleAlignmentMultiplierChange} valueLabelDisplay=\"auto\" />\n      </>\n      <>\n        <Typography id=\"cohesionMultiplier\" gutterBottom>\n          Cohesion Multiplier\n        </Typography>\n        <Slider value={cohesionMultiplier} min={0.1} max={1} step={0.1} onChange={handleCohesionMultiplierChange} valueLabelDisplay=\"auto\" />\n      </>\n      <>\n        <Typography id=\"separationMultiplier\" gutterBottom>\n          Separation Multiplier\n        </Typography>\n        <Slider value={separationMultiplier} min={0.1} max={1} step={0.1} onChange={handleSeparationMultiplierChange} valueLabelDisplay=\"auto\" />\n      </>\n      <>\n        <Typography id=\"maxForce\" gutterBottom>\n          Max Force\n        </Typography>\n        <Slider value={maxForce} min={0.1} max={1} step={0.05} onChange={handleMaxForceChange} valueLabelDisplay=\"auto\" />\n      </>\n      <>\n        <Typography id=\"maxAcceleration\" gutterBottom>\n          Max Acceleration\n        </Typography>\n        <Slider value={maxAcceleration} min={0.1} max={10} step={0.1} onChange={handleMaxAccelerationChange} valueLabelDisplay=\"auto\" />\n      </>\n      <>\n        <Typography id=\"maxSpeed\" gutterBottom>\n          Max Speed\n        </Typography>\n        <Slider value={maxSpeed} min={0.1} max={10} step={0.1} onChange={handleMaxSpeedChange} valueLabelDisplay=\"auto\" />\n      </>\n    </>\n  );\n};\n\nexport default BoidsSketch;\n","import React from 'react';\nimport BoidsSimulation from './BoidsSimulation';\n\n// import logo from './logo.svg';\n// import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BoidsSimulation />\n\n        <p>\n          Testing P5 using the Boids algorithm, and following the implementation on{' '}\n          <a className=\"App-link\" href=\"http://www.red3d.com/cwr/boids/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            http://www.red3d.com/cwr/boids/\n          </a>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}