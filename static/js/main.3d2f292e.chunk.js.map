{"version":3,"sources":["BoidsSimulation/Vector2.ts","BoidsSimulation/Boid.ts","BoidsSimulation/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Vector2","vector2","x","y","this","value","magnitude","Math","sqrt","vect1","vect2","vect","divisor","multiplier","min","max","random","point1","point2","Boid","pos","velocity","perceptionRadius","limits","MAX_BIRDS_AWARENESS","MAX_SPEED","acceleration","MAX_FORCE","MAX_ACCELERATION","smallestLimit","flock","alignmentValue","align","cohesionValue","cohesion","separationValue","separate","mult","add","clamped","edges","steering","total","boid","distance","div","normalized","sub","diff","BoidsSketch","props","setup","p5","canvasParentRef","createCanvas","parent","draw","update","updateFlock","length","push","background","ellipse","App","className","href","target","rel","BoidsSimulation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d2f292e.chunk.js","sourcesContent":["interface IVector2 {\n  x: number;\n  y: number;\n}\n\nclass Vector2 {\n  x: number;\n  y: number;\n\n  constructor(vector2?: IVector2) {\n    this.x = (vector2 && vector2.x) || 0;\n    this.y = (vector2 && vector2.y) || 0;\n  }\n\n  static add(vect1: IVector2, vect2: IVector2): Vector2 {\n    const x = vect1.x + vect2.x;\n    const y = vect1.y + vect2.y;\n    return new Vector2({ x, y });\n  }\n\n  static sub(vect1: IVector2, vect2: IVector2): Vector2 {\n    const x = vect1.x - vect2.x;\n    const y = vect1.y - vect2.y;\n    return new Vector2({ x, y });\n  }\n\n  static div(vect: IVector2, divisor: number): Vector2 {\n    const x = vect.x / divisor;\n    const y = vect.y / divisor;\n    return new Vector2({ x, y });\n  }\n\n  static mult(vect: IVector2, multiplier: number): Vector2 {\n    const x = vect.x * multiplier;\n    const y = vect.y * multiplier;\n    return new Vector2({ x, y });\n  }\n\n  clamped(value: number): Vector2 {\n    const magnitude = this.magnitude();\n    const x = this.x / (magnitude / value);\n    const y = this.y / (magnitude / value);\n    return new Vector2({ x, y });\n  }\n\n  normalized(): Vector2 {\n    const magnitude = this.magnitude();\n    const x = this.x / magnitude;\n    const y = this.y / magnitude;\n    return new Vector2({ x, y });\n  }\n\n  magnitude(): number {\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\n  }\n\n  public static random(min: number, max: number) {\n    const x = Math.random() * (max - min) + min;\n    const y = Math.random() * (max - min) + min;\n    return new Vector2({ x, y });\n  }\n\n  public static distance(point1: IVector2, point2: IVector2) {\n    return Math.sqrt((point2.x - point1.x) ** 2 + (point2.y - point1.y) ** 2);\n  }\n}\n\nexport default Vector2;\n","import Vector2 from './Vector2';\n\ninterface IBoid {\n  pos: Vector2;\n  velocity: Vector2;\n  limits: Vector2;\n  perceptionRadius: number;\n}\n\nclass Boid {\n  pos: Vector2;\n  velocity: Vector2;\n  acceleration: Vector2;\n  limits: Vector2;\n  perceptionRadius: number;\n  MAX_BIRDS_AWARENESS: number;\n  MAX_SPEED: number;\n  MAX_FORCE: number;\n  MAX_ACCELERATION: number;\n\n  constructor(pos?: Vector2, velocity?: Vector2, perceptionRadius?: number, limits?: Vector2, MAX_BIRDS_AWARENESS?: number, MAX_SPEED?: number) {\n    this.limits = limits || new Vector2({ x: 500, y: 500 });\n    const smallestLimit = this.limits.x < this.limits.y ? this.limits.x : this.limits?.y;\n    this.pos = pos || Vector2.random(0, smallestLimit);\n    this.velocity = velocity || Vector2.random(-1, 1);\n\n    this.perceptionRadius = perceptionRadius || 30;\n\n    this.MAX_BIRDS_AWARENESS = MAX_BIRDS_AWARENESS || 7;\n    this.MAX_SPEED = MAX_SPEED || 2;\n    this.MAX_FORCE = 0.1;\n    this.MAX_ACCELERATION = 0.5;\n    this.acceleration = Vector2.random(1, this.MAX_ACCELERATION);\n  }\n\n  update(flock?: Boid[]) {\n    const alignmentMultiplier = 1;\n    const cohesionMultiplier = 2;\n    const separationMultiplier = 2;\n    if (flock) {\n      let alignmentValue = this.align(flock);\n      let cohesionValue = this.cohesion(flock);\n      let separationValue = this.separate(flock);\n\n      alignmentValue = Vector2.mult(alignmentValue, alignmentMultiplier);\n      cohesionValue = Vector2.mult(cohesionValue, cohesionMultiplier);\n      separationValue = Vector2.mult(separationValue, separationMultiplier);\n\n      this.acceleration = Vector2.add(this.acceleration, alignmentValue);\n      this.acceleration = Vector2.add(this.acceleration, cohesionValue);\n      this.acceleration = Vector2.add(this.acceleration, separationValue);\n    }\n\n    this.pos = Vector2.add(this.pos, this.velocity);\n    this.velocity = Vector2.add(this.velocity, this.acceleration);\n    this.velocity = this.velocity.clamped(this.MAX_SPEED);\n    this.acceleration = Vector2.mult(this.acceleration, 0.5);\n    this.edges();\n  }\n\n  align(flock: Boid[]) {\n    let steering = new Vector2();\n    let total = 0;\n    for (const boid of flock) {\n      if (this !== boid) {\n        const isInPerceptionRadius = Vector2.distance(this.pos, boid.pos) <= this.perceptionRadius;\n        if (isInPerceptionRadius) {\n          steering = Vector2.add(steering, boid.velocity);\n          total++;\n          if (total >= this.MAX_BIRDS_AWARENESS) break;\n        }\n      }\n    }\n    if (total > 0) {\n      steering = Vector2.div(steering, total);\n      steering = Vector2.mult(steering.normalized(), this.MAX_SPEED);\n      steering = Vector2.sub(steering, this.velocity);\n      steering = steering.clamped(this.MAX_FORCE);\n    }\n    return steering;\n  }\n\n  separate(flock: Boid[]) {\n    let steering = new Vector2();\n    let total = 0;\n    for (const boid of flock) {\n      if (this !== boid) {\n        const isInPerceptionRadius = Vector2.distance(this.pos, boid.pos) <= this.perceptionRadius;\n        if (isInPerceptionRadius) {\n          let diff = Vector2.sub(this.pos, boid.pos);\n          const distance = Vector2.distance(this.pos, boid.pos);\n          diff = Vector2.div(diff, distance ** 2);\n          steering = Vector2.add(steering, diff);\n          total++;\n          if (total >= this.MAX_BIRDS_AWARENESS) break;\n        }\n      }\n    }\n    if (total > 0) {\n      steering = Vector2.div(steering, total);\n      steering = Vector2.mult(steering.normalized(), this.MAX_SPEED);\n      steering = Vector2.sub(steering, this.velocity);\n      steering = steering.clamped(this.MAX_FORCE);\n    }\n    return steering;\n  }\n\n  cohesion(flock: Boid[]) {\n    let steering = new Vector2();\n    let total = 0;\n    for (const boid of flock) {\n      if (this !== boid) {\n        const isInPerceptionRadius = Vector2.distance(this.pos, boid.pos) <= this.perceptionRadius;\n        if (isInPerceptionRadius) {\n          steering = Vector2.add(steering, boid.pos);\n          total++;\n          if (total >= this.MAX_BIRDS_AWARENESS) break;\n        }\n      }\n    }\n    if (total > 0) {\n      steering = Vector2.div(steering, total);\n      // steering = Vector2.mult(steering.normalized(), this.MAX_SPEED);\n      steering = Vector2.sub(steering, this.pos);\n      steering = Vector2.mult(steering.normalized(), this.MAX_SPEED);\n      steering = Vector2.sub(steering, this.velocity);\n      steering = steering.clamped(this.MAX_FORCE);\n    }\n    return steering;\n  }\n\n  edges() {\n    if (this.pos.x > this.limits.x) this.pos.x = 0;\n    else if (this.pos.x < 0) this.pos.x = this.limits.x;\n\n    if (this.pos.y > this.limits.y) this.pos.y = 0;\n    else if (this.pos.y < 0) this.pos.y = this.limits.y;\n  }\n}\n\nexport default Boid;\n","import React from 'react';\nimport Sketch from 'react-p5';\nimport p5Types from 'p5'; //Import this for typechecking and intellisense\nimport Boid from './Boid';\n\ninterface ComponentProps {\n  //Your component props\n}\n\nconst BoidsSketch: React.FC<ComponentProps> = (props: ComponentProps) => {\n  let x = 50;\n  const y = 50;\n  const flock: Boid[] = [];\n  //See annotations in JS for more information\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    p5.createCanvas(500, 500).parent(canvasParentRef);\n  };\n\n  function updateFlock(flock: Array<Boid>) {\n    for (let boid of flock) {\n      boid.update(flock);\n    }\n  }\n\n  const draw = (p5: p5Types) => {\n    updateFlock(flock);\n    if (flock.length < 100) {\n      flock.push(new Boid());\n    }\n    p5.background(0);\n    // console.log(flock);\n    for (const boid of flock) {\n      // console.log(boid);\n      // p5.stroke(10, 10);\n      // console.log(boid);\n      p5.ellipse(boid.pos.x, boid.pos.y, 5, 5);\n    }\n    // p5.ellipse(x, y, 70, 70);\n    // x++;\n    // console.log(x);\n  };\n\n  return <Sketch setup={setup} draw={draw} />;\n};\n\nexport default BoidsSketch;\n","import React from 'react';\nimport BoidsSimulation from './BoidsSimulation';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Testing P5 using the Boids algorithm implemented in my game Drone Delivery following{' '}\n          <a className=\"App-link\" href=\"http://www.red3d.com/cwr/boids/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            http://www.red3d.com/cwr/boids/\n          </a>\n        </p>\n        <BoidsSimulation />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}